#!/usr/bin/python

import sys
from PyQt4 import QtCore
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from Xlib import *
import Xlib.protocol.event

class Writer(QThread):
	def __init__(self):
		QThread.__init__(self)
		self.pipe = QFile('/tmp/qtraynotify.fifo')
		self.pipe.open(QIODevice.WriteOnly | QIODevice.Text)

	def run(self):
		while True:
			self.pipe.write('\n')

class Reader(QThread):
	dataReceived = QtCore.pyqtSignal(str)

	def __init__(self):
		QThread.__init__(self)

	def run(self):
		while True:
			data = sys.stdin.readline()
			data = unicode(data, "utf-8")
			self.dataReceived.emit(data)

class Msg(QWidget):
	clicked = QtCore.pyqtSignal()

	def __init__(self):
		QWidget.__init__(self)
		w = 200
		h = 50
		titlePalette = self.palette()
		textPalette = self.palette()
		titlePalette.setColor(QPalette.Window, QColor(0x202020))
		titlePalette.setColor(QPalette.WindowText, QColor(0x888888))
		textPalette.setColor(QPalette.Window, QColor(0x0))
		textPalette.setColor(QPalette.WindowText, QColor(0xcccccc))
		
		self.setWindowFlags(Qt.ToolTip)
		self.resize(w, h)
		self.move(QDesktopWidget().screenGeometry().width() - w,
				QDesktopWidget().screenGeometry().height() - h)
		self.setPalette(titlePalette)

		self.frame = QWidget(self)
		self.frame.resize(w - 6, h - 20)
		self.frame.move(3, 17)
		#self.frame.setFrameStyle(QFrame.StyledPanel)
		self.frame.setPalette(textPalette)
		self.frame.setAutoFillBackground(True)

		self.label = QLabel('Label', self)
		self.label.resize(w - 6, 17)
		self.label.move(3, 0)
		self.label.setPalette(titlePalette)
		font = self.label.font()
		font.setPointSize(font.pointSize() - 2)
		self.label.setFont(font)
		self.label.setAlignment(Qt.AlignCenter)

		self.msg = QLabel('Text', self.frame)
		self.msg.resize(w - 6, h - 20)
		self.msg.move(0, 7)
		self.msg.setPalette(textPalette)
		self.msg.setAlignment(Qt.AlignCenter)

	def mousePressEvent(self, event):
		if event.button() == Qt.LeftButton:
			self.clicked.emit()
		self.hide()
		event.accept()

	def setText(self, text):
		self.msg.setText(text)

	def setLabel(self, text):
		self.label.setText(text)

class Icon(QSystemTrayIcon):
	def __init__(self):
		QSystemTrayIcon.__init__(self)
		self.setIcon(QIcon('/usr/share/icons/qtraynotify/msg.svg'))

		self.menu = QMenu()
		self.actionExit = QAction('Exit', self.menu)
		self.menu.addAction(self.actionExit)
		self.setContextMenu(self.menu)

		self.actionExit.triggered.connect(qApp.quit)
		self.activated.connect(self.whenActivated)
		self.setToolTip('Mcabber')

		self.msg = Msg()
		self.msg.clicked.connect(self.whenClicked)
		self.msg.hide()
		self.msg.setLabel('Mcabber: incoming message')
		
		self.timer = QTimer()
		self.timer.timeout.connect(self.msg.hide)

		#self.writer = Writer()
		#self.writer.start()

		self.reader = Reader()
		self.reader.dataReceived.connect(self.dataReceived)
		self.reader.start()
		
		#self.showMessage('Title', 'Message')

	def whenClicked(self):
		self.changeWorkspace(2)
		self.setIcon(QIcon('/usr/share/icons/qtraynotify/msg.svg'))
		self.msg.hide()
		self.timer.stop()

	def whenActivated(self, reason):
		if reason == 3:
			self.whenClicked()

	def changeWorkspace(self, n):
		display = Xlib.display.Display()
		screen = display.screen()
		root = screen.root
		data = ([n] + [X.CurrentTime] + [0] * 3) [:5]
		event = Xlib.protocol.event.ClientMessage(window = root,
				client_type = display.intern_atom("_NET_CURRENT_DESKTOP"),
				data = (32, (data)))
		mask = (X.SubstructureRedirectMask|X.SubstructureNotifyMask)
		root.send_event(event, event_mask=mask)
		display.flush()

	def dataReceived(self, data):
		if data != '\n':
			self.setIcon(QIcon('/usr/share/icons/qtraynotify/msg-new.svg'))
			self.msg.setText(data)
			self.msg.show()
			self.timer.start(5000);

if __name__ == '__main__':
	app = QApplication(sys.argv)
	icon = Icon()
	icon.show()
	sys.exit(app.exec_())

